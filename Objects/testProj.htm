<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\testProj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\testProj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Aug 01 23:15:01 2018
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
coreTask_f &rArr; printMenu &rArr; printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[37]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC1_COMP_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">EXTI0_1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">EXTI2_3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">EXTI4_15_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">I2C2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">LCD_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">LPTIM1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">PVD_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RCC_CRS_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">RNG_LPUART1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">SPI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">SPI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from timerhal.o(i.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[1c]">TIM21_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">TIM22_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">TIM2_IRQHandler</a> from timerhal.o(i.TIM2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[1b]">TIM6_DAC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">TSC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">USART1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">USART2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup.o(.text)
 <LI><a href="#[31]">adcMenu_f</a> from menu.o(i.adcMenu_f) referenced from menu.o(.data)
 <LI><a href="#[2c]">bufferToZigbeeShim</a> from sampler.o(i.bufferToZigbeeShim) referenced from menu.o(.data)
 <LI><a href="#[34]">coreTask_f</a> from menu.o(i.coreTask_f) referenced from menu.o(.data)
 <LI><a href="#[2b]">fillBlockMenuShim</a> from sampler.o(i.fillBlockMenuShim) referenced from menu.o(.data)
 <LI><a href="#[2a]">fillSpiSawTooth</a> from memoryselftest.o(i.fillSpiSawTooth) referenced from menu.o(.data)
 <LI><a href="#[2d]">multiSectorSpiMemFillShim</a> from sampler.o(i.multiSectorSpiMemFillShim) referenced from menu.o(.data)
 <LI><a href="#[33]">sampleLoop_f</a> from menu.o(i.sampleLoop_f) referenced from menu.o(.data)
 <LI><a href="#[32]">spiMem_f</a> from menu.o(i.spiMem_f) referenced from menu.o(.data)
 <LI><a href="#[28]">spiWalkTest</a> from memoryselftest.o(i.spiWalkTest) referenced 2 times from menu.o(.data)
 <LI><a href="#[29]">spiWalkTestRegisterSequentialMode</a> from memoryselftest.o(i.spiWalkTestRegisterSequentialMode) referenced from menu.o(.data)
 <LI><a href="#[2e]">streamAllSPiZigbee</a> from sampler.o(i.streamAllSPiZigbee) referenced from menu.o(.data)
 <LI><a href="#[30]">timerMenu_f</a> from menu.o(i.timerMenu_f) referenced from menu.o(.data)
 <LI><a href="#[2f]">zigbeeMenu_f</a> from menu.o(i.zigbeeMenu_f) referenced from menu.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[90]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[91]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[92]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[93]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[94]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[95]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[96]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[98]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[99]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[44]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a5]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[a7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[a9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[aa]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ab]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[39]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[ac]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[ad]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[40]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; mainMenu_f &rArr; printMenu &rArr; printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ae]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[43]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[af]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[45]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printStars
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[35]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text))

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelayUs
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[42]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdc
</UL>

<P><STRONG><a name="[73]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdcSample
</UL>

<P><STRONG><a name="[4f]"></a>HAL_ADC_Init</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdc
</UL>

<P><STRONG><a name="[50]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[51]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdcSample
</UL>

<P><STRONG><a name="[52]"></a>HAL_ADC_Start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdc
</UL>

<P><STRONG><a name="[77]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniLdoClocksAndPins
</UL>

<P><STRONG><a name="[6b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetReset
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniLdoClocksAndPins
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSamplingSupply
</UL>

<P><STRONG><a name="[4d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[5d]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepWFImultiplesOf1000ms
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelayUs
</UL>

<P><STRONG><a name="[54]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiPutByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiPut
</UL>

<P><STRONG><a name="[56]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 894 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiPutGet
</UL>

<P><STRONG><a name="[57]"></a>HAL_UART_Receive</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartGetMenu
</UL>

<P><STRONG><a name="[59]"></a>HAL_UART_Transmit</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenu
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPut
</UL>

<P><STRONG><a name="[5a]"></a>SRAM_CS_HIGH</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mc23a1024.o(i.SRAM_CS_HIGH))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_CS_HIGH &rArr; gpioSetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSram
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteDMASequentialFinalize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getByteSram
</UL>

<P><STRONG><a name="[5c]"></a>SRAM_CS_LOW</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc23a1024.o(i.SRAM_CS_LOW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_CS_LOW &rArr; gpioSetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSram
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteDMASequentialInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadDMASequentialInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getByteSram
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timerhal.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timerhal.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[5e]"></a>ZIGBEE_DOZE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, zigbee.o(i.ZIGBEE_DOZE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ZIGBEE_DOZE &rArr; gpioSetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbeeWrite
</UL>

<P><STRONG><a name="[5f]"></a>ZIGBEE_WAKE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, zigbee.o(i.ZIGBEE_WAKE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ZIGBEE_WAKE &rArr; gpioSetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioSetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbeeWrite
</UL>

<P><STRONG><a name="[31]"></a>adcMenu_f</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(i.adcMenu_f))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>blockForInput</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i.blockForInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = blockForInput &rArr; uartGetMenu &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartGetMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTest
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillSpiSawTooth
</UL>

<P><STRONG><a name="[85]"></a>blockToAdressTranslate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc23a1024.o(i.blockToAdressTranslate))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialWrite
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialRead
</UL>

<P><STRONG><a name="[62]"></a>bufferToZigbee</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sampler.o(i.bufferToZigbee))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bufferToZigbee &rArr; memToBuffer &rArr; spiMemPrepSequentialRead &rArr; spiReadDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memToBuffer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbeeWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferToZigbeeShim
</UL>

<P><STRONG><a name="[2c]"></a>bufferToZigbeeShim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sampler.o(i.bufferToZigbeeShim))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = bufferToZigbeeShim &rArr; bufferToZigbee &rArr; memToBuffer &rArr; spiMemPrepSequentialRead &rArr; spiReadDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferToZigbee
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>clearScreen</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, menu.o(i.clearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clearScreen &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
</UL>

<P><STRONG><a name="[34]"></a>coreTask_f</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, menu.o(i.coreTask_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = coreTask_f &rArr; printMenu &rArr; printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>enableSamplingSupply</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ldo.o(i.enableSamplingSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enableSamplingSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>fillBlock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sampler.o(i.fillBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fillBlock &rArr; spiMemPrepSequentialWrite &rArr; spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelayUsDirty
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSpiLld
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdcSample
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemFinalizeSequential
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBlockMenuShim
</UL>

<P><STRONG><a name="[2b]"></a>fillBlockMenuShim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sampler.o(i.fillBlockMenuShim))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fillBlockMenuShim &rArr; fillBlock &rArr; spiMemPrepSequentialWrite &rArr; spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>fillSpiSawTooth</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, memoryselftest.o(i.fillSpiSawTooth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fillSpiSawTooth &rArr; spiMemPrepSequentialWrite &rArr; spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSpiLld
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemFinalizeSequential
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenuAutoCount
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>getAdcSample</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(i.getAdcSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getAdcSample &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSectorSpiMemFill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBlock
</UL>

<P><STRONG><a name="[74]"></a>getByteSram</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mc23a1024.o(i.getByteSram))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getByteSram &rArr; spiPutGet &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiPutGet
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_LOW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTest
</UL>

<P><STRONG><a name="[5b]"></a>gpioSetReset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gpiohal.o(i.gpioSetReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpioSetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_WAKE
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_DOZE
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_LOW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_HIGH
</UL>

<P><STRONG><a name="[89]"></a>hash</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memoryselftest.o(i.hash))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTest
</UL>

<P><STRONG><a name="[76]"></a>iniLdoClocksAndPins</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, ldo.o(i.iniLdoClocksAndPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iniLdoClocksAndPins &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>initAdc</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, adc.o(i.initAdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initAdc &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main_fw.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; mainMenu_f &rArr; printMenu &rArr; printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMenu_f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAdc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniLdoClocksAndPins
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdcSample
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSamplingSupply
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[79]"></a>mainMenu_f</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, menu.o(i.mainMenu_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mainMenu_f &rArr; printMenu &rArr; printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>memToBuffer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sampler.o(i.memToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = memToBuffer &rArr; spiMemPrepSequentialRead &rArr; spiReadDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByteSpiLld
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialRead
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemFinalizeSequential
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferToZigbee
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamAllSPiZigbee
</UL>

<P><STRONG><a name="[7d]"></a>multiSectorSpiMemFill</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sampler.o(i.multiSectorSpiMemFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = multiSectorSpiMemFill &rArr; spiMemPrepSequentialWrite &rArr; spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelayUsDirty
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSpiLld
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdcSample
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemFinalizeSequential
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSectorSpiMemFillShim
</UL>

<P><STRONG><a name="[2d]"></a>multiSectorSpiMemFillShim</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sampler.o(i.multiSectorSpiMemFillShim))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = multiSectorSpiMemFillShim &rArr; multiSectorSpiMemFill &rArr; spiMemPrepSequentialWrite &rArr; spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSectorSpiMemFill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>printMenu</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, menu.o(i.printMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = printMenu &rArr; printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearScreen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printStars
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLen
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMenu_f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMem_f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coreTask_f
</UL>

<P><STRONG><a name="[68]"></a>printNewLine</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, menu.o(i.printNewLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = printNewLine &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMenu_f
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTest
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillSpiSawTooth
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMem_f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coreTask_f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[80]"></a>putChar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mc23a1024.o(i.putChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiPutByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteDMASequentialInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadDMASequentialInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMode
</UL>

<P><STRONG><a name="[7b]"></a>readByteSpiLld</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spihal.o(i.readByteSpiLld))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readByteSpiLld
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSpiLld
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memToBuffer
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
</UL>

<P><STRONG><a name="[33]"></a>sampleLoop_f</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(i.sampleLoop_f))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>setMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mc23a1024.o(i.setMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setMode &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putChar
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_LOW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialWrite
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialRead
</UL>

<P><STRONG><a name="[83]"></a>sleepWFImultiplesOf1000ms</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, timerhal.o(i.sleepWFImultiplesOf1000ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sleepWFImultiplesOf1000ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTest
</UL>

<P><STRONG><a name="[71]"></a>spiMemFinalizeSequential</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mc23a1024.o(i.spiMemFinalizeSequential))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiMemFinalizeSequential &rArr; spiWriteDMASequentialFinalize &rArr; SRAM_CS_HIGH &rArr; gpioSetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteDMASequentialFinalize
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSectorSpiMemFill
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memToBuffer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBlock
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillSpiSawTooth
</UL>

<P><STRONG><a name="[7a]"></a>spiMemPrepSequentialRead</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mc23a1024.o(i.spiMemPrepSequentialRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spiMemPrepSequentialRead &rArr; spiReadDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadDMASequentialInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockToAdressTranslate
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memToBuffer
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
</UL>

<P><STRONG><a name="[6d]"></a>spiMemPrepSequentialWrite</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mc23a1024.o(i.spiMemPrepSequentialWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spiMemPrepSequentialWrite &rArr; spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteDMASequentialInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockToAdressTranslate
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSectorSpiMemFill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBlock
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillSpiSawTooth
</UL>

<P><STRONG><a name="[32]"></a>spiMem_f</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, menu.o(i.spiMem_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = spiMem_f &rArr; printMenu &rArr; printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>spiPut</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spihal.o(i.spiPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spiPut &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSram
</UL>

<P><STRONG><a name="[81]"></a>spiPutByte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spihal.o(i.spiPutByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putChar
</UL>

<P><STRONG><a name="[75]"></a>spiPutGet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spihal.o(i.spiPutGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spiPutGet &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getByteSram
</UL>

<P><STRONG><a name="[86]"></a>spiReadDMASequentialInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mc23a1024.o(i.spiReadDMASequentialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = spiReadDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putChar
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_LOW
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialRead
</UL>

<P><STRONG><a name="[28]"></a>spiWalkTest</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, memoryselftest.o(i.spiWalkTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spiWalkTest &rArr; getByteSram &rArr; spiPutGet &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleepWFImultiplesOf1000ms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSram
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getByteSram
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenuAutoCount
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>spiWalkTestRegisterSequentialMode</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, memoryselftest.o(i.spiWalkTestRegisterSequentialMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spiWalkTestRegisterSequentialMode &rArr; spiMemPrepSequentialWrite &rArr; spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeByteSpiLld
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByteSpiLld
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hash
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialWrite
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialRead
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemFinalizeSequential
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenuAutoCount
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForInput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>spiWriteDMASequentialFinalize</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mc23a1024.o(i.spiWriteDMASequentialFinalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spiWriteDMASequentialFinalize &rArr; SRAM_CS_HIGH &rArr; gpioSetReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemFinalizeSequential
</UL>

<P><STRONG><a name="[87]"></a>spiWriteDMASequentialInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mc23a1024.o(i.spiWriteDMASequentialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = spiWriteDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putChar
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_LOW
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMemPrepSequentialWrite
</UL>

<P><STRONG><a name="[2e]"></a>streamAllSPiZigbee</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sampler.o(i.streamAllSPiZigbee))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = streamAllSPiZigbee &rArr; memToBuffer &rArr; spiMemPrepSequentialRead &rArr; spiReadDMASequentialInit &rArr; putChar &rArr; spiPutByte &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memToBuffer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbeeWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>timerDelayUs</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, timerhal.o(i.timerDelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timerDelayUs &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbeeWrite
</UL>

<P><STRONG><a name="[70]"></a>timerDelayUsDirty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timerhal.o(i.timerDelayUsDirty))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSectorSpiMemFill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBlock
</UL>

<P><STRONG><a name="[30]"></a>timerMenu_f</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(i.timerMenu_f))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>uartGetMenu</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uarthal.o(i.uartGetMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uartGetMenu &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForInput
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[8c]"></a>uartPut</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uarthal.o(i.uartPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uartPut &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zigbeeWrite
</UL>

<P><STRONG><a name="[66]"></a>uartPutMenu</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uarthal.o(i.uartPutMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenuAutoCount
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearScreen
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printStars
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[72]"></a>uartPutMenuAutoCount</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, menu.o(i.uartPutMenuAutoCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uartPutMenuAutoCount &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLen
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTest
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillSpiSawTooth
</UL>

<P><STRONG><a name="[6f]"></a>writeByteSpiLld</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, spihal.o(i.writeByteSpiLld))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByteSpiLld
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSectorSpiMemFill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBlock
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTestRegisterSequentialMode
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillSpiSawTooth
</UL>

<P><STRONG><a name="[8a]"></a>writeByteSram</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mc23a1024.o(i.writeByteSram))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = writeByteSram &rArr; spiPut &rArr; HAL_SPI_Transmit &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiPut
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_LOW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWalkTest
</UL>

<P><STRONG><a name="[2f]"></a>zigbeeMenu_f</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(i.zigbeeMenu_f))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>zigbeeWrite</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, zigbee.o(i.zigbeeWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = zigbeeWrite &rArr; uartPut &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPut
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDelayUs
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_WAKE
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_DOZE
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferToZigbee
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamAllSPiZigbee
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4a]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[4c]"></a>ADC_Enable</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Enable &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[55]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[7c]"></a>getLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, menu.o(i.getLen))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenuAutoCount
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[69]"></a>menuSelect</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, menu.o(i.menuSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = menuSelect &rArr; uartGetMenu &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenu
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartGetMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printNewLine
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLen
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainMenu_f
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiMem_f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coreTask_f
</UL>

<P><STRONG><a name="[7e]"></a>printStars</STRONG> (Thumb, 28 bytes, Stack size 88 bytes, menu.o(i.printStars))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printStars &rArr; uartPutMenu &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartPutMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printMenu
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
